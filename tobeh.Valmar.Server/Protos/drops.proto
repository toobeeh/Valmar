syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "tobeh.Valmar";
package admin;

// Service definition for drop and management actions
service Drops {
  
  // Schedule a new drop to be dispatched
  rpc ScheduleDrop (ScheduleDropRequest) returns (google.protobuf.Empty);

  // Get the enxt scheduled drop
  rpc GetScheduledDrop (google.protobuf.Empty) returns (ScheduledDropMessage);

  // Get the current boost factor for drop delays
  rpc GetCurrentBoostFactor (google.protobuf.Empty) returns (CurrentBoostFactorReply);

  // Calculate min and max drop delay bounds for given online count and boost factor
  rpc CalculateDropDelayBounds (CalculateDelayRequest) returns (DropDelayBoundsReply);

  // claim a drop and receive result
  rpc ClaimDrop (ClaimDropMessage) returns (ClaimDropResultMessage);

  // log a drop claim
  rpc LogDropClaim (LogDropMessage) returns (google.protobuf.Empty);

  // reward a drop
  rpc RewardDrop (RewardDropMessage) returns (google.protobuf.Empty);
}

message ScheduledDropMessage {
  int64 id = 1;
  google.protobuf.Timestamp timestamp = 2;
  google.protobuf.Int32Value eventDropId = 3;
}

message ClaimDropMessage {
  int64 dropId = 1;
}

message ClaimDropResultMessage {
  int64 dropId = 1;
  bool firstClaim = 3;
  bool clearedDrop = 4;
  int32 catchMs = 5;
  double leagueWeight = 6;
  google.protobuf.Int32Value eventDropId = 7;
}

message RewardDropMessage {
  int32 login = 1;
  google.protobuf.Int32Value eventDropId = 2;
  double value = 3;
}

message LogDropMessage {
  int64 dropId = 1;
  int64 discordId = 2;
  int64 claimTimestamp = 3;
  string lobbyKey = 4;
  int32 catchMs = 5;
  google.protobuf.Int32Value eventDropId = 6;
}

// request to schedule a new drop
message ScheduleDropRequest {
  int32 delaySeconds = 1;
  google.protobuf.Int32Value eventDropId = 2;
}

// message to calculate the delay bounds for a drop
message CalculateDelayRequest {
  int32 onlinePlayerCount = 1;
  double boostFactor = 2;
}

// response containing the min and max delay bounds for a drop delay
message DropDelayBoundsReply {
  int32 minDelaySeconds = 1;
  int32 maxDelaySeconds = 2;
}

// request to get the current boost factor
message CurrentBoostFactorReply {
  double boost = 1;
}
