syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "awards.proto";

option csharp_namespace = "tobeh.Valmar";
package inventory;

// Service definition for inventory checks and actions for sprites, scenes, stats, eventdrops etc
service Inventory {
  
  // gets the bubble credit details of a member
  rpc GetBubbleCredit (GetBubbleCreditRequest) returns (BubbleCreditReply);
  
  // gets the drop credit details of a member
  rpc GetDropCredit (GetDropCreditRequest) returns (DropCreditReply);
  
  // gets the count of unlocked sprite slots of a member
  rpc GetSpriteSlotCount (GetSpriteSlotCountRequest) returns (SpriteSlotCountReply);
  
  // gets the event drop credit details of a member
  rpc GetEventCredit (GetEventCreditRequest) returns (stream EventCreditReply);

  // gets progress of a member during an event
  rpc GetEventProgress (GetEventProgressRequest) returns (EventProgressMessage);
  
  // get the complete sprite inventory of a member (including inactive sprites -> slot = 0)
  rpc GetSpriteInventory (GetSpriteInventoryRequest) returns (stream SpriteSlotConfigurationReply);
  
  // add a sprite to the inventory of a member
  rpc BuySprite (BuySpriteRequest) returns (google.protobuf.Empty);
  
  // activate a sprite combo for a selected set of slots
  rpc UseSpriteCombo (UseSpriteComboRequest) returns (google.protobuf.Empty);
  
  // set a user configuration for a sprite color
  rpc SetSpriteColorConfiguration (SetSpriteColorRequest) returns (google.protobuf.Empty);

  // get the complete scene inventory of a member
  rpc GetSceneInventory (GetSceneInventoryRequest) returns (SceneInventoryReply);

  // add a scene to the inventory of a member
  rpc BuyScene (BuySceneRequest) returns (google.protobuf.Empty);

  // activate a scene for a member
  rpc UseScene (UseSceneRequest) returns (google.protobuf.Empty);
  
  // get the price of the next scene and the total amount of bubbles spent on scenes in the inv
  rpc GetScenePrice (ScenePriceRequest) returns (ScenePriceReply);
  
  // get the inventory of awards - currently available, received and given
  rpc GetAwardInventory (GetAwardInventoryMessage) returns (AwardInventoryMessage);
  
  // get the current award pack level and cooldown until next pack
  rpc GetAwardPackLevel (GetAwardPackLevelMessage) returns (AwardPackLevelMessage);
  
  // get images from the image gallery of a member
  rpc GetGalleryItems (GetGalleryItemsMessage) returns (stream GalleryItemMessage);
  
  // open an award pack
  rpc OpenAwardPack (OpenAwardPackMessage) returns (AwardPackResultMessage);

  // give an award to a player
  rpc GiveAward (GiveAwardMessage) returns (awards.AwardReply);
  
  // gets the first seen date of a member
  rpc GetFirstSeenDate (GetFirstSeenDateRequest) returns (FirstSeenMessage);
  
  // gift an amount of event credit to another member
  rpc GiftEventCredit (GiftEventCreditMessage) returns (GiftLossMessage);
  
  // gets the current gift loss rate
  rpc GetGiftLossRate (GetGiftLossRateMessage) returns (GiftLossRateMessage);
  
  // patronizes another member
  rpc PatronizeMember (PatronizeMemberMessage) returns (google.protobuf.Empty);
  
  // set the patron emoji of a user
  rpc SetPatronEmoji (SetPatronEmojiMessage) returns (google.protobuf.Empty);
}

message GiveAwardMessage {
  int32 login = 1;
  int32 awardInventoryId = 2;
  string lobbyId = 3;
  int32 receiverLobbyPlayerId = 4;
}

message GetEventProgressRequest {
  int32 login = 1;
  google.protobuf.Int32Value eventId = 2; // null if for all events
}

message EventDropProgressMessage {
  int32 eventDropId = 1;
  double value = 2;
}

message EventProgressMessage {
  double totalCollected = 1;
  repeated EventDropProgressMessage eventDropProgress = 2;
}

message SetPatronEmojiMessage {
  int32 login = 1;
  google.protobuf.StringValue emoji = 2;
}

message PatronizeMemberMessage {
  int32 login = 1;
  google.protobuf.Int64Value patronizedDiscordId = 2;
}

message GetGiftLossRateMessage {
  int32 login = 1;
  int32 eventId = 2;
}

message GiftEventCreditMessage {
  int32 amount = 1;
  int32 recipientLogin = 2;
  int32 senderLogin = 3;
  int32 eventDropId = 4;
}

message GiftLossRateMessage {
  double lossRateBase = 1;
  double collectedDrops = 2;
  int32 requiredDrops = 3;
}

message GiftLossMessage {
  int32 lostAmount = 1;
  int32 totalAmount = 2;
  GiftLossRateMessage lossRate = 3;
}

message GetFirstSeenDateRequest {
  int32 login = 1;
}

message FirstSeenMessage {
  google.protobuf.Timestamp firstSeen = 1;
}

message GetAwardInventoryMessage {
  int32 login = 1;
}

message ConsumedAwardMessage {
  int32 awardId = 1;
  int32 ownerLogin = 2;
  int32 awardeeLogin = 3;
  google.protobuf.Timestamp awardedTimestamp = 4;
  google.protobuf.Int64Value linkedImageId = 5;
}

message AvailableAwardMessage {
  int32 awardId = 1;
}

message AwardInventoryMessage {
  repeated AvailableAwardMessage availableAwards = 1;
  repeated ConsumedAwardMessage receivedAwards = 2;
  repeated ConsumedAwardMessage givenAwards = 3;
}

message GetAwardPackLevelMessage {
  int32 login = 1;
}

message AwardPackLevelMessage {
  awards.AwardRarityMessage level = 1;
  int32 collectedBubbles = 2;
}

message GetBubbleCreditRequest {
  int32 login = 1;
}

message GetGalleryItemsMessage {
  int32 login = 1;
  repeated int64 imageIds = 2;
}

message GalleryItemMessage {
  int64 imageId = 1;
  string imageUrl = 2;
  string title = 3;
  string author = 4;
  google.protobuf.Timestamp date = 5;
  string language = 6;
  bool isOwn = 7;
  bool inPrivateLobby = 8;
}

message OpenAwardPackMessage {
  int32 login = 1;
}

message AwardPackResultMessage {
  repeated awards.AwardReply awards = 1;
}

message BubbleCreditReply {
  
  // credit that is the sum of collected bubbles plus worth of drops
  int32 totalCredit = 1;
  
  // part of total credit that is available to get spent
  int32 availableCredit = 2;
  
  // the part of total credit that has been gained through playtime
  int32 bubblesAmount = 3;
}

message GetDropCreditRequest {
  int32 login = 1;
}

message DropCreditReply {
  
  // the total credit of drops, made up of legacy drops and weighted league drops
  double credit = 1;
  
  // the count of caught drops; made up of legacy count and league drop count
  int32 count = 2;
}

message BuySpriteRequest {
  int32 login = 1;
  int32 spriteId = 2;
}

message SpriteSlotConfigurationRequest {
  int32 slotId = 1;
  google.protobuf.Int32Value spriteId = 2;
}

message UseSpriteComboRequest {
  int32 login = 1;
  bool clearOtherSlots = 2;
  repeated SpriteSlotConfigurationRequest combo = 3;
}

message SpriteColorConfigurationRequest {
  int32 spriteId = 1;
  google.protobuf.Int32Value colorShift = 2;
}

message SetSpriteColorRequest {
  int32 login = 1;
  bool clearOtherConfigs = 2;
  repeated SpriteColorConfigurationRequest colorConfig = 3;
}

message GetSpriteInventoryRequest {
  int32 login = 1;
}

message SpriteSlotConfigurationReply {
  int32 slot = 1;
  int32 spriteId = 2;
  google.protobuf.Int32Value colorShift = 3;
}

message GetEventCreditRequest {
  int32 login = 1;
  int32 eventId = 2;
}

message EventCreditReply {
  int32 totalCredit = 1;
  int32 availableCredit = 2;
  int32 eventDropId = 3;
}

message GetSpriteSlotCountRequest {
  int32 login = 1;
}

message SpriteSlotCountReply {
  int32 unlockedSlots = 1;
  double dropsUntilNextSlot = 2;
}

message GetSceneInventoryRequest {
  int32 login = 1;
}

message SceneInventoryItemReply {
  int32 sceneId = 1;
  google.protobuf.Int32Value sceneShift = 2;
}

message SceneInventoryReply {
  google.protobuf.Int32Value activeId = 1;
  google.protobuf.Int32Value activeShift = 3;
  repeated SceneInventoryItemReply scenes = 2;
}

message BuySceneRequest {
  int32 login = 1;
  int32 sceneId = 2;
  google.protobuf.Int32Value sceneShift = 3;
}

message UseSceneRequest {
  int32 login = 1;
  google.protobuf.Int32Value sceneId = 2;
  google.protobuf.Int32Value sceneShift = 3;
}

message ScenePriceRequest {
  int32 boughtSceneCount = 1;
}

message ScenePriceReply {
  int32 nextPrice = 1;
  int32 totalBubblesSpent = 2;
}

